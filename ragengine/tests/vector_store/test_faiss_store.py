import os
from tempfile import TemporaryDirectory
from unittest.mock import patch

import pytest
from vector_store.faiss_store import FaissVectorStoreHandler
from models import Document
from embedding.huggingface_local import LocalHuggingFaceEmbedding
from config import MODEL_ID, INFERENCE_URL, INFERENCE_ACCESS_SECRET

@pytest.fixture(scope='session')
def init_embed_manager():
    return LocalHuggingFaceEmbedding(MODEL_ID)

@pytest.fixture
def vector_store_manager(init_embed_manager):
    with TemporaryDirectory() as temp_dir:
        print(f"Saving Temporary Test Storage at: {temp_dir}")
        # Mock the persistence directory
        os.environ['PERSIST_DIR'] = temp_dir
        yield FaissVectorStoreHandler(init_embed_manager)

def test_index_documents(vector_store_manager):
    documents = [
        Document(doc_id="1", text="First document", metadata={"type": "text"}),
        Document(doc_id="2", text="Second document", metadata={"type": "text"})
    ]
    
    doc_ids = vector_store_manager.index_documents("test_index", documents)
    
    assert len(doc_ids) == 2
    assert doc_ids == ["1", "2"]

def test_index_documents_isolation(vector_store_manager):
    doc_1_id, doc_2_id = "1", "2"
    documents1 = [
        Document(doc_id=doc_1_id, text="First document in index1", metadata={"type": "text"}),
    ]
    documents2 = [
        Document(doc_id=doc_2_id, text="First document in index2", metadata={"type": "text"}),
    ]

    # Index documents in separate indices
    index_name_1, index_name_2 = "index1", "index2"
    vector_store_manager.index_documents(index_name_1, documents1)
    vector_store_manager.index_documents(index_name_2, documents2)

    # Ensure documents are correctly persisted and separated by index
    doc_1 = vector_store_manager.get_document(index_name_1, doc_1_id)
    assert doc_1 and doc_1.node_ids # Ensure documents were created

    doc_2 = vector_store_manager.get_document(index_name_2, doc_2_id)
    assert doc_2 and doc_2.node_ids # Ensure documents were created

    # Ensure that the documents do not mix between indices
    assert vector_store_manager.get_document(index_name_2, doc_1_id) is None, f"Document {doc_1_id} should not exist in {index_name_2}"
    assert vector_store_manager.get_document(index_name_1, doc_2_id) is None, f"Document {doc_2_id} should not exist in {index_name_1}"

@patch('requests.post')
def test_query_documents(mock_post, vector_store_manager):
    # Define Mock Response for Custom Inference API
    mock_response = {
        "result": "This is the completion from the API"
    }

    mock_post.return_value.json.return_value = mock_response

    # Add documents to index
    documents = [
        Document(doc_id="1", text="First document", metadata={"type": "text"}),
        Document(doc_id="2", text="Second document", metadata={"type": "text"})
    ]
    vector_store_manager.index_documents("test_index", documents)

    params = {"temperature": 0.7}
    # Mock query and results
    query_result = vector_store_manager.query("test_index", "First", top_k=1, params=params)

    assert query_result is not None
    assert query_result.response == "This is the completion from the API"

    mock_post.assert_called_once_with(
        INFERENCE_URL,
        # Auto-Generated by LlamaIndex
        json={"prompt": "Context information is below.\n---------------------\ntype: text\n\nFirst document\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: First\nAnswer: ", "formatted": True, 'temperature': 0.7},
        headers={"Authorization": f"Bearer {INFERENCE_ACCESS_SECRET}"}
    )

def test_add_document(vector_store_manager, capsys):
    documents = [Document(doc_id="3", text="Third document", metadata={"type": "text"})]
    vector_store_manager.index_documents("test_index", documents)

    # Add a document to the existing index
    new_document = Document(doc_id="4", text="Fourth document", metadata={"type": "text"})
    vector_store_manager.index_documents("test_index", new_document)

    # Assert that the document exists
    assert vector_store_manager.document_exists("test_index", "4")

def test_persist_and_load_index_store(vector_store_manager):
    """Test that the index store is persisted and loaded correctly."""
    # Add a document and persist the index
    documents = [Document(doc_id="1", text="Test document", metadata={"type": "text"})]
    vector_store_manager.index_documents("test_index", documents)
    vector_store_manager._persist("test_index")

    # Simulate a fresh load of the index store (clearing in-memory state)
    vector_store_manager.index_store = None  # Clear current in-memory store
    vector_store_manager._load_index_store()

    # Verify that the store was reloaded and contains the expected index structure
    assert vector_store_manager.index_store is not None
    assert len(vector_store_manager.index_store.index_structs()) > 0

# TODO: Prevent default re-indexing from load_index_from_storage
def test_persist_and_load_index(vector_store_manager):
    """Test that an index is persisted and then loaded correctly."""
    # Add a document and persist the index
    documents = [Document(doc_id="1", text="Test document", metadata={"type": "text"})]
    vector_store_manager.index_documents("test_index", documents)

    documents = [Document(doc_id="1", text="Another Test document", metadata={"type": "text"})]
    vector_store_manager.index_documents("another_test_index", documents)

    vector_store_manager._persist_all()

    # Simulate a fresh load of the index (clearing in-memory state)
    vector_store_manager.index_map = {}  # Clear current in-memory index map
    loaded_indices = vector_store_manager._load_indices()

    # Verify that the index was reloaded and contains the expected document
    assert loaded_indices is not None
    assert vector_store_manager.document_exists("test_index", "1")
    assert vector_store_manager.document_exists("another_test_index", "1")

    vector_store_manager.index_map = {}  # Clear current in-memory index map
    loaded_index = vector_store_manager._load_index("test_index")

    assert loaded_index is not None
    assert vector_store_manager.document_exists("test_index", "1")
    assert not vector_store_manager.document_exists("another_test_index", "1") # Since we didn't load this index

