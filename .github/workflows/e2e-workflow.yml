name: kaito-e2e-workflow

on:
  workflow_call:
    inputs:
      git_sha:
        type: string
        required: true
      tag:
        type: string
      isRelease:
        type: boolean
        default: false
      registry:
        type: string
      region:
        type: string
        description: "the azure location to run the e2e test in"
        default: "eastus"
      k8s_version:
        type: string
        default: "1.29.2"
    secrets:
      E2E_CLIENT_ID:
        required: true
      E2E_TENANT_ID:
        required: true
      E2E_SUBSCRIPTION_ID:
        required: true
      E2E_AMRT_SECRET_NAME:
        required: true
      E2E_ACR_AMRT_USERNAME:
        required: true
      E2E_ACR_AMRT_PASSWORD:
        required: true

permissions:
  contents: read # This is required for actions/checkout

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # This is required for requesting the JWT
    environment: e2e-test
    env:
      GO_VERSION: "1.22"

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@a4aa98b93cab29d9b1101a6143fb8bce00e2eac4 # v2.7.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
        with:
          ref: ${{ inputs.git_sha }}

      - name: Set e2e Resource and Cluster Name
        run: |
          rand=$(git rev-parse --short ${{ inputs.git_sha }})

          if [ "$rand" = "" ]; then
             rand=$RANDOM
          fi

          echo "VERSION=${rand}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=kaito${rand}" >> $GITHUB_ENV
          echo "RUN_LLAMA_13B=false" >> $GITHUB_ENV
          echo "REGISTRY=kaito${rand}.azurecr.io" >> $GITHUB_ENV

      - name: Set Registry
        if: ${{ inputs.isRelease }}
        run: |
              echo "REGISTRY=${{ inputs.registry }}" >> $GITHUB_ENV
              echo "VERSION=$(echo ${{ inputs.tag }} | tr -d v)" >> $GITHUB_ENV

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION  }}

      - name: Az login
        uses: azure/login@6b2456866fc08b011acb422a92a4aa20e2c4de32 # v2.1.0
        with:
          client-id: ${{ secrets.E2E_CLIENT_ID }}
          tenant-id: ${{ secrets.E2E_TENANT_ID }}
          subscription-id: ${{ secrets.E2E_SUBSCRIPTION_ID }}

      - uses: azure/setup-helm@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        id: install

      - name: Create Resource Group
        shell: bash
        run: |
          make create-rg
        env:
          AZURE_RESOURCE_GROUP: ${{ env.CLUSTER_NAME }}

      - name: Create ACR
        shell: bash
        run: |
          make create-acr
        env:
          AZURE_RESOURCE_GROUP: ${{ env.CLUSTER_NAME }}
          AZURE_ACR_NAME: ${{ env.CLUSTER_NAME }}

      - name: Create Azure Identity
        uses: azure/CLI@v2.0.0
        with:
          inlineScript: |
            az identity create --name gpuIdentity --resource-group  ${{ env.CLUSTER_NAME }}

      - name: Generate APIs
        run: |
          make generate

      - name: build KAITO image
        if: ${{ !inputs.isRelease }}
        shell: bash
        run: |
          make docker-build-kaito
        env:
          REGISTRY: ${{ env.REGISTRY }}
          VERSION: ${{ env.VERSION }}

      - name: create cluster
        shell: bash
        run: |
          make create-aks-cluster
        env:
          AZURE_ACR_NAME: ${{ env.CLUSTER_NAME }}
          AZURE_RESOURCE_GROUP: ${{ env.CLUSTER_NAME }}
          AZURE_CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
          AZURE_LOCATION: ${{ inputs.region }}
          AKS_K8S_VERSION: ${{ inputs.k8s_version }}

      - name: Install gpu-provisioner helm chart
        shell: bash
        run: |
          make gpu-provisioner-helm
          kubectl wait --for=condition=available deploy "gpu-provisioner" -n gpu-provisioner --timeout=300s
        env:
          AZURE_RESOURCE_GROUP: ${{ env.CLUSTER_NAME }}
          AZURE_CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
          AZURE_TENANT_ID: ${{ secrets.E2E_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.E2E_SUBSCRIPTION_ID }}
          GPU_PROVISIONER_VERSION: ${{ vars.GPU_PROVISIONER_VERSION }}

      - uses: azure/login@6b2456866fc08b011acb422a92a4aa20e2c4de32 # v2.1.0
        with:
          client-id: ${{ secrets.E2E_CLIENT_ID }}
          tenant-id: ${{ secrets.E2E_TENANT_ID }}
          subscription-id: ${{ secrets.E2E_SUBSCRIPTION_ID }}

      - name: Create Role Assignment
        uses: azure/CLI@v2.0.0
        with:
          inlineScript: |
            IDENTITY_PRINCIPAL_ID="$(az identity show --name gpuIdentity --resource-group ${{ env.CLUSTER_NAME }} --query 'principalId' -otsv)"
            az role assignment create --assignee ${IDENTITY_PRINCIPAL_ID} --scope "/subscriptions/${{ secrets.E2E_SUBSCRIPTION_ID }}/resourceGroups/${{ env.CLUSTER_NAME }}"  --role "Contributor"

      - name: Create Azure Federated Identity
        uses: azure/CLI@v2.0.0
        with:
          inlineScript: |
            AKS_OIDC_ISSUER="$(az aks show -n "${{ env.CLUSTER_NAME }}" -g "${{ env.CLUSTER_NAME }}" --query 'oidcIssuerProfile.issuerUrl' -otsv)"
            az identity federated-credential create --name gpu-fed-credential --identity-name gpuIdentity --resource-group "${{ env.CLUSTER_NAME }}" \
            --issuer "${AKS_OIDC_ISSUER}" --subject system:serviceaccount:"gpu-provisioner:gpu-provisioner" --audience api://AzureADTokenExchange

      - name: Install KAITO Workspace helm chart
        shell: bash
        run: |
          make az-patch-install-helm
          kubectl wait --for=condition=available deploy "kaito-workspace" -n kaito-workspace --timeout=300s
        env:
          AZURE_RESOURCE_GROUP: ${{ env.CLUSTER_NAME }}
          AZURE_CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
          REGISTRY: ${{ env.REGISTRY }}
          VERSION: ${{ env.VERSION }}
            
      - name: Add Secret Credentials
        run: |
          kubectl create secret docker-registry ${{ secrets.E2E_AMRT_SECRET_NAME }} \
          --docker-server=${{ secrets.E2E_ACR_AMRT_USERNAME }}.azurecr.io \
          --docker-username=${{ secrets.E2E_ACR_AMRT_USERNAME }} \
          --docker-password=${{ secrets.E2E_ACR_AMRT_PASSWORD }}
            
      - name: Log kaito-workspace
        run: |
          kubectl get pods -n kaito-workspace -o name | grep "^pod/kaito-workspace" | sed 's/^pod\///' | xargs -I {} kubectl logs -n kaito-workspace {}

      - name: Run e2e test
        run: |
          make kaito-workspace-e2e-test
        env:
          AZURE_CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
          RUN_LLAMA_13B: ${{ env.RUN_LLAMA_13B }}
          AI_MODELS_REGISTRY: ${{ secrets.E2E_ACR_AMRT_USERNAME }}.azurecr.io
          AI_MODELS_REGISTRY_SECRET: ${{ secrets.E2E_AMRT_SECRET_NAME }}

      - name: Cleanup e2e resources
        if: ${{ always() }}
        uses: azure/CLI@v2.0.0
        with:
          inlineScript: |
            set +e
            az group delete --name "${{ env.CLUSTER_NAME }}" --yes --no-wait || true
