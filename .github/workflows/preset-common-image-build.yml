name: preset-common-image-build

on:
  workflow_call:
    inputs:
        image_already_built: 
            type: string
        weights_dir:
            type: string
        branch_name: 
            type: string
        image_name:
            type: string
        image_tag:
            type: string
        acr_name:
            type: string
        acr_username:
            type: string
        acr_password:
            type: string
        model_name:
            type: string
        model_type:
            type: string
        model_version:
            type: string
        model_runtime:
            type: string
        runs_on:
            type: string
            default: "ubuntu-latest"

permissions:
  id-token: write
  contents: read

jobs:
  preset-build:
    runs-on: ["self-hosted", "${{ inputs.runs_on }}"]
    permissions:
      contents: read
      id-token: write # This is required for requesting the JWT
    environment: preset-env
    env:
      GO_VERSION: "1.22"
    
    steps:
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Azure CLI latest
        run: |
          if ! which az > /dev/null; then
              echo "Azure CLI not found. Installing..."
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          else
              echo "Azure CLI already installed."
          fi
      
      - name: Check Available Disk Space
        run: |
            echo "Initial disk usage:"
            df -h
  
            # Remove unused Docker resources
            docker system prune -a -f --volumes
  
            # Check Docker-related disk usage
            echo "Docker-related disk usage after cleanup:"
            docker system df
  
            # Check final disk usage
            echo "Final disk usage:"
            df -h

      - name: 'Check if Image exists in target ACR'
        id: check_test_image
        run: |
            ACR_NAME=${{ inputs.acr_name }}
            IMAGE_NAME=${{ inputs.image_name }}
            TAG=${{ inputs.image_tag }}

            # Use '|| true' to prevent script from exiting with an error if the repository is not found
            TAGS=$(az acr repository show-tags -n $ACR_NAME --repository $IMAGE_NAME --output tsv || true)

            if [[ -z "$TAGS" ]]; then
                echo "Image $IMAGE_NAME:$TAG or repository not found in $ACR_NAME."
                echo "IMAGE_EXISTS=false" >> $GITHUB_OUTPUT
            else
                if echo "$TAGS" | grep -q "^$TAG$"; then
                    echo "IMAGE_EXISTS=true" >> $GITHUB_OUTPUT
                else
                    echo "IMAGE_EXISTS=false" >> $GITHUB_OUTPUT
                    echo "Image $IMAGE_NAME:$TAG not found in $ACR_NAME."
                fi
            fi
    
      - name: Launch Python Script to Kickoff Build Jobs
        if: steps.check_test_image.outputs.IMAGE_EXISTS == 'false'
        id: launch_script
        run: |
            PR_BRANCH=${{ inputs.branch_name }} \
            ACR_NAME=${{ inputs.acr_name }} \
            ACR_USERNAME=${{ inputs.acr_username }} \
            ACR_PASSWORD=${{ inputs.acr_password }} \
            MODEL_NAME=${{ inputs.model_name }} \
            MODEL_TYPE=${{ inputs.model_type }} \
            MODEL_VERSION=${{ inputs.model_version }} \
            MODEL_RUNTIME=${{ inputs.model_runtime }} \
            MODEL_TAG=${{ inputs.image_tag }} \
            WEIGHTS_DIR=${{ inputs.weights_dir }} \
            python3 .github/workflows/kind-cluster/main.py
    
      # Check the exit status of the Python script
      - name: Check Python Script Status
        if: ${{ always() }}
        run: |
          if [[ "${{ inputs.image_already_built }}" == "true" ]]; then
            echo "Image already exists; skipping the status step."
          elif [[ "${{ steps.launch_script.outcome }}" != "success" ]]; then
            echo "Python script failed to execute successfully."
            exit 1  # Fail the job due to script failure
          else
            echo "Python script executed successfully."
          fi

      # Cleanup Resources
      - name: Cleanup
        if: ${{ always() }}
        run: |
          if [[ "${{ inputs.image_already_built }}" == "false" ]]; then
            kubectl get job --no-headers -o custom-columns=":metadata.name" | grep "^docker-build-job-${{ matrix.model.name }}-[0-9]" | xargs -r kubectl delete job
          fi
