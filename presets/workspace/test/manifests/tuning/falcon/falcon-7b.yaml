apiVersion: apps/v1
kind: Deployment
metadata:
  name: falcon-7b-tuning
spec:
  replicas: 1
  selector:
    matchLabels:
      app: falcon
  template:
    metadata:
      labels:
        app: falcon
    spec:
      containers:
        - name: falcon-container
          image: aimodelsregistrytest.azurecr.io/tuning-falcon-7b:0.0.1
          command: ["/bin/sh", "-c", "sleep infinity"]
          resources:
            requests:
              nvidia.com/gpu: 2
            limits:
              nvidia.com/gpu: 2  # Requesting 2 GPUs
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: workspace
              mountPath: /workspace

        - name: docker-sidecar
          image: docker:dind
          securityContext:
            privileged: true  # Allows container to manage its own containers
          volumeMounts:
            - name: workspace
              mountPath: /workspace
          env:
            - name: ACR_USERNAME
              value: "{{ACR_USERNAME}}"
            - name: ACR_PASSWORD
              value: "{{ACR_PASSWORD}}"
            - name: TAG
              value: "{{TAG}}"
          command: ["/bin/sh"]
          args:
            - -c
            - |
              # Start the Docker daemon in the background with specific options for DinD
              dockerd &
              # Wait for the Docker daemon to be ready
              while ! docker info > /dev/null 2>&1; do
                echo "Waiting for Docker daemon to start..."
                sleep 1
              done
              echo 'Docker daemon started'

              while true; do
                FILE_PATH=$(find /workspace/tfs -name 'fine_tuning_completed.txt')
                if [ ! -z "$FILE_PATH" ]; then
                  echo "FOUND TRAINING COMPLETED FILE at $FILE_PATH"

                  PARENT_DIR=$(dirname "$FILE_PATH")
                  echo "Parent directory is $PARENT_DIR"

                  TEMP_CONTEXT=$(mktemp -d)
                  cp "$PARENT_DIR/adapter_config.json" "$TEMP_CONTEXT/adapter_config.json"
                  cp -r "$PARENT_DIR/adapter_model.safetensors" "$TEMP_CONTEXT/adapter_model.safetensors"

                  # Create a minimal Dockerfile
                  echo 'FROM scratch
                  ADD adapter_config.json /
                  ADD adapter_model.safetensors /' > "$TEMP_CONTEXT/Dockerfile"
              
                  # Login to Docker registry
                  echo $ACR_PASSWORD | docker login $ACR_USERNAME.azurecr.io -u $ACR_USERNAME --password-stdin

                  docker build -t $ACR_USERNAME.azurecr.io/adapter-falcon-7b:$TAG "$TEMP_CONTEXT"
                  docker push $ACR_USERNAME.azurecr.io/adapter-falcon-7b:$TAG

                  # Cleanup: Remove the temporary directory
                  rm -rf "$TEMP_CONTEXT"

                  # Remove the file to prevent repeated builds, or handle as needed
                  # rm "$FILE_PATH"
                fi
                sleep 10  # Check every 10 seconds
              done

      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: workspace
          emptyDir: {}

      tolerations:
        - effect: NoSchedule
          key: sku
          operator: Equal
          value: gpu
        - effect: NoSchedule
          key: nvidia.com/gpu
          operator: Exists
